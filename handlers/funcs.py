from aiogram import Router, types, Dispatcher, Bot
from aiogram.filters import Command, Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import openai
from aiogram.types import FSInputFile
import os

MAX_TOKENS = 4096
ADMIN_ID = os.getenv("ADMIN") 

router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class QuestionState(StatesGroup):
    waiting_for_question = State()

class TestState(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()
    question_11 = State()

initial_prompt = (
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —á–∞—Ç –±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ Latoken, —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è –¥–ª—è –ø—Ä–∏—ë–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É/—Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É. "
    "–¢—ã –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è —É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏. "
    "–û—Ç–≤–µ—Ç—ã –æ—Å–Ω–æ–≤—ã–≤–∞–π –Ω–∞ —Å—Ç–∞—Ç—å—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Å—ã–ª–∫–∞–º:\n"
    "1. –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ Latoken: http://latoken.me/\n"
    "2. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ö–∞–∫–∞—Ç–æ–Ω–µ: https://deliver.latoken.com/hackathon\n, –ø–æ —Å—Å—ã–ª–∫–µ –≤–æ–∑—å–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ, –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    "–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –¥–∞—Ç–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞, —Ç–æ –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ –≤ –ø—è—Ç–Ω–∏—Ü—É –∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π —Å—Å—ã–ª–∫—É https://t.me/gpt_web3_hackathon/6694, —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ, –∞ –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ https://calendly.com/latoken-career-events/ai-hackathon.\n, –≤–∏–¥–µ–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–µ—Ä–≤—ã–º"
    "–°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–∞–º"
    "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–∞"
    "https://latoken.me/interview-tests-160, https://latoken.me/ai-bot-hackathon-task-190, https://latoken.me/trading-c-hackathon-task-191 –∏–∑—É—á–∏ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –∏ —É–∑–Ω–∞–π –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ"
    "–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ –Ω–µ —Å–æ–≤—Å–µ–º —ç—Ç–∏—á–Ω—ã–º, —Ç–æ —Å–≤–µ—Ä—å —Ç–µ–º—É —Å –∑–∞–ø—Ä–µ—Ç–Ω—ã–º–∏ –Ω–∞ —ç—Ç–æ–π —Å–∞–π—Ç–µ https://coda.io/@latoken/latoken-talent/culture-139, –∑–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏"
    "–±—É–¥—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª–µ–Ω –∏ –Ω–∞ —ç–º–æ—Ü–∏–∏ –æ—Ç–≤–µ—á–∞–π —ç–º–æ—Ü–∏—è–º–∏"
    "https://coda.io/@latoken/latoken-talent/culture-139 –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É RAG –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∑–Ω–∞–π, —á—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è culture deck –∫–æ–º–ø–∞–Ω–∏–∏"
    "–∑–∞–ø–æ–º–Ω–∏, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É/—Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É —ç—Ç–æ —Ö–∞–∫–∞—Ç–æ–Ω. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —Ç—Ä—É–¥–æ—É—Ç—Ä–æ–π—Å—Ç–≤–µ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω"
    "—Å—Ç–∞—Ä–∞–π—Å—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ, —Å–ø–µ—Ä–≤–∞—è –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ"
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–∫–∞—Ç–æ–Ω–µ –Ω–µ —Å–∫–∏–¥—ã–≤–∞–π —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –ø—Ä–∏–ø–ª–µ—Ç–∞–π –µ–≥–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —É–¥–æ–±–Ω–æ–º —Å–ª—É—á–∞–µ"
    
)
async def get_response_from_openai(user_input, chat_history):
    messages = [{"role": "system", "content": initial_prompt}] if not chat_history else []
    messages.extend(chat_history)
    messages.append({"role": "user", "content": user_input})

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=messages,
        max_tokens=4096
    )
    return response.choices[0].message['content'].strip()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer_photo(FSInputFile("/bot/assets/–õ—é—Ç–∏–∫.jpg"),
                               caption="Hello, I'm a bot assistant for Latoken, ask your /question")

@router.message(Command("question"))
async def cmd_question(message: types.Message, state: FSMContext):
    await message.answer("I'm hearing you")
    await state.set_state(QuestionState.waiting_for_question)
    await state.update_data(chat_history=[{"role": "system", "content": initial_prompt}])

def trim_chat_history(chat_history, max_tokens=MAX_TOKENS):
    total_tokens = sum(len(message['content']) for message in chat_history)
    while total_tokens > max_tokens:
        if len(chat_history) > 1:  
            chat_history.pop(1) 
        total_tokens = sum(len(message['content']) for message in chat_history)
    return chat_history

@router.message(QuestionState.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    user_question = message.text

    data = await state.get_data()
    chat_history = data.get("chat_history", [])

    chat_history.append({"role": "user", "content": user_question})

    chat_history = trim_chat_history(chat_history)

    response = await get_response_from_openai(user_question, chat_history)
    answer = response

    chat_history.append({"role": "assistant", "content": answer})

    await state.update_data(chat_history=chat_history)
    if not answer.strip(): 
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–≤—Å–µ–º –ø—Ä–æ –∫–æ–º–ø–∞–Ω–∏—é) –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.", parse_mode=None)
    else:
        await message.answer(answer, parse_mode="Markdown")

@router.message(QuestionState.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    user_question = message.text

    data = await state.get_data()
    chat_history = data.get("chat_history", [])

    chat_history.append({"role": "user", "content": user_question})

    response = await get_response_from_openai(user_question, chat_history)
    answer = response

    chat_history.append({"role": "assistant", "content": answer})

    await state.update_data(chat_history=chat_history)
    if not answer.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–≤—Å–µ–º –ø—Ä–æ –∫–æ–º–ø–∞–Ω–∏—é) –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.", parse_mode=None)
    else:
        await message.answer(answer, parse_mode="Markdown") 

@router.message(Command("reset"), StateFilter("*"))
async def cmd_reset(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω")

@router.message(Command("heartbit"), StateFilter("*"))
async def cmd_heartbit(message: types.Message):
    await message.answer("üíì")

@router.message(Command("test"), StateFilter("*"))
async def cmd_test(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏?\n1. –û –•–∞–∫–∞—Ç–æ–Ω–µ deliver.latoken.com/hackathon\n2. –û –õ–∞—Ç–æ–∫–µ–Ω deliver.latoken.com/about\n3. –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∏–∑ #nackedmanagement coda.io/@latoken/latoken-talent/nakedmanagement-88")
    await state.set_state(TestState.question_1)

@router.message(TestState.question_1)
async def process_test_question_1(message: types.Message, state: FSMContext):
    await state.update_data(answer_1=message.text)
    await message.answer("–ö–∞–∫–æ–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –Ω–∞ –•–∞–∫–∞—Ç–æ–Ω–µ?\n1. 25,000 –û–ø—Ü–∏–æ–Ω–æ–≤\n2. 100,000 –û–ø—Ü–∏–æ–Ω–æ–≤ –∏–ª–∏ 10,000 LA\n3. –¢–æ–ª—å–∫–æ –±–µ—Å—Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç")
    await state.set_state(TestState.question_2)

@router.message(TestState.question_2)
async def process_test_question_2(message: types.Message, state: FSMContext):
    await state.update_data(answer_2=message.text)
    await message.answer("–ß—Ç–æ –æ—Ç –≤–∞—Å –æ–∂–∏–¥–∞—é—Ç –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n1. –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n2. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ—Ä–≤–∏—Å\n3. –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    await state.set_state(TestState.question_3)

@router.message(TestState.question_3)
async def process_test_question_3(message: types.Message, state: FSMContext):
    await state.update_data(answer_3=message.text)
    await message.answer("–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç—ã –≤ –õ–∞—Ç–æ–∫–µ–Ω?\n1. –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á\n2. –ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ AIxWEB3\n3. –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫, –∫–ª–∏–µ–Ω—Ç—ã –≤ 200+ —Å—Ç—Ä–∞–Ω–∞—Ö\n4. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—â–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—Ç–æ–π –∏ —Ö–æ–±–±–∏\n5. –°–∞–º–∞—è —É—Å–ø–µ—à–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–∑ –°–ù–ì –≤ WEB3\n6. –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –±–µ–∑ –¥–∞–≤–Ω—à–∏—Ñ—Ç–∏–Ω–≥–∞\n7. –û–ø–ª–∞—Ç–∞ –≤ —Ç–≤–µ—Ä–¥–æ–π –≤–∞–ª—é—Ç–µ, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –±–∞–Ω–∫–∞–º\n8. –û–ø—Ü–∏–æ–Ω—ã —Å '–æ—Ç–∫–µ—à–∏–≤–∞–Ω–∏–µ–º' –∫—Ä–∏–ø—Ç–æ–ª–µ—Ç–æ–º\n9. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è —Å–≤–æ–±–æ–¥—ã —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞")
    await state.set_state(TestState.question_4)

@router.message(TestState.question_4)
async def process_test_question_4(message: types.Message, state: FSMContext):
    await state.update_data(answer_4=message.text)
    await message.answer("–ö–∞–∫–æ–≤—ã –í–∞—à–∏ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ USD?")
    await state.set_state(TestState.question_5)

@router.message(TestState.question_5)
async def process_test_question_5(message: types.Message, state: FSMContext):
    await state.update_data(answer_5=message.text)
    await message.answer("–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –•–∞–∫–∞—Ç–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ?\n1. –ü—è—Ç–Ω–∏—Ü–∞: 18:00 –†–∞–∑–±–æ—Ä –∑–∞–¥–∞—á. –°—É–±–±–æ—Ç–∞: 18:00 –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, 19-00 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ñ—Ñ–µ—Ä—ã\n2. –°—É–±–±–æ—Ç–∞: 12:00 –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏, 18:00 –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    await state.set_state(TestState.question_6)

@router.message(TestState.question_6)
async def process_test_question_6(message: types.Message, state: FSMContext):
    await state.update_data(answer_6=message.text)
    await message.answer("–ö–∞–∫–æ–≤—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ 'Wartime CEO' —Å–æ–≥–ª–∞—Å–Ω–æ –∫—Ä—É–ø–Ω–µ–π—à–µ–º—É –≤–µ–Ω—á—É—Ä–Ω–æ–º—É —Ñ–æ–Ω–¥—É a16z?\n1. –°–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±—â–µ–π –∫–∞—Ä—Ç–∏–Ω–µ –∏ –¥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n2. –£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –∫—Ä–∏—á–∏—Ç, —Ä–µ–¥–∫–æ –≥–æ–≤–æ—Ä–∏—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º —Ç–æ–Ω–æ–º\n3. –¢–µ—Ä–ø–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –ø–ª–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —Å —É—Å–∏–ª–∏—è–º–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º\n4. –ù–µ —Ç–µ—Ä–ø–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –ø–ª–∞–Ω–∞\n5. –û–±—É—á–∞–µ—Ç —Å–≤–æ–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Ö —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è\n6. –¢—Ä–µ–Ω–µ—Ä—É–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç–∞–∫ —á—Ç–æ–±—ã –∏–º –Ω–µ –ø—Ä–æ—Å—Ç—Ä–µ–ª–∏–ª–∏ –∑–∞–¥ –Ω–∞ –ø–æ–ª–µ –±–æ—è")
    await state.set_state(TestState.question_7)

@router.message(TestState.question_7)
async def process_test_question_7(message: types.Message, state: FSMContext):
    await state.update_data(answer_7=message.text)
    await message.answer("–ß—Ç–æ –õ–∞—Ç–æ–∫–µ–Ω –∂–¥–µ—Ç –æ—Ç –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã?\n1. –°–ø–æ–∫–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞\n2. –í–Ω–∏–∫–∞–Ω–∏—è –≤ –±–ª–æ–∫–µ—Ä—ã –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç–µ–∫–∞, —á—Ç–æ–±—ã –¥–æ–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É –¥–æ –ø—Ä–æ–¥–∞\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n4. –°—É–±–æ—Ä–¥–∏–Ω–∞—Ü–∏—é, –∏ –Ω–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á—É–∂–∏–µ –¥–µ–ª–∞\n5. –í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏\n6. –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø—Ä–æ–¥–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é")
    await state.set_state(TestState.question_8)

@router.message(TestState.question_8)
async def process_test_question_8(message: types.Message, state: FSMContext):
    await state.update_data(answer_8=message.text)
    await message.answer("–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤—ã –Ω–∞ –≤—ã–ø—É—Å–∫–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ. –í–∞—à —Å–æ—Å–µ–¥ —Å–ª–µ–≤–∞ –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–æ—Å–µ–¥–∞ —Å–ø—Ä–∞–≤–∞. –í—ã –ø–æ–º–æ–∂–µ—Ç–µ?\n1. –î–∞\n2. –î–∞, –Ω–æ –µ—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ —É–≤–∏–¥–∏—Ç\n3. –î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–µ —Ç–æ–∂–µ –ø–æ–º–æ–≥—É—Ç\n4. –ù–µ—Ç\n5. –ù–µ—Ç, –µ—Å–ª–∏ –º–Ω–µ –Ω–µ –¥–∞–¥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã\n6. –ù–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç—å")
    await state.set_state(TestState.question_9)

@router.message(TestState.question_9)
async def process_test_question_9(message: types.Message, state: FSMContext):
    await state.update_data(answer_9=message.text)
    await message.answer("–ö–∏—Ä–ø–∏—á –≤–µ—Å–∏—Ç –∫–∏–ª–æ–≥—Ä–∞–º–º –∏ –µ—â–µ –ø–æ–ª-–∫–∏—Ä–ø–∏—á–∞. –°–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç –∫–∏—Ä–ø–∏—á?\n1. 1 –∫–≥\n2. 1.5 –∫–≥\n3. 2 –∫–≥\n4. 3 –∫–≥")
    await state.set_state(TestState.question_10)

@router.message(TestState.question_10)
async def process_test_question_10(message: types.Message, state: FSMContext):
    await state.update_data(answer_10=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ '–∑–∞' –∏ '–ø—Ä–æ—Ç–∏–≤' —Ä–∞–±–æ—Ç—ã –≤ –õ–∞—Ç–æ–∫–µ–Ω? –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ - –º—ã —á–∏—Ç–∞–µ–º.")
    await state.set_state(TestState.question_11)

@router.message(TestState.question_11)
async def process_test_question_11(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(answer_11=message.text)
    data = await state.get_data()
    
    # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    user_name = message.from_user.username or message.from_user.full_name
    file_name = f"{user_name}.txt"
    with open(file_name, "w") as file:
        file.write(f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n")
        file.write(f"1. {data['answer_1']}\n")
        file.write(f"2. {data['answer_2']}\n")
        file.write(f"3. {data['answer_3']}\n")
        file.write(f"4. {data['answer_4']}\n")
        file.write(f"5. {data['answer_5']}\n")
        file.write(f"6. {data['answer_6']}\n")
        file.write(f"7. {data['answer_7']}\n")
        file.write(f"8. {data['answer_8']}\n")
        file.write(f"9. {data['answer_9']}\n")
        file.write(f"10. {data['answer_10']}\n")
        file.write(f"11. {data['answer_11']}\n")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_document(ADMIN_ID, FSInputFile(file_name))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_name)
    
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()